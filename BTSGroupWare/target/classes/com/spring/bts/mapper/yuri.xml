<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<!-- ==== 대부분은 namespace에 파일이름 사용(유일하니까) ==== -->
<mapper namespace="yuri">

<!-- #### 중요 #### 
		HashMap 타입으로 매개변수를 받아온 것을 꺼내서 사용할 때
		1. 데이터로 사용할 때는 #{key명} 이고, 
		2. 식별자(테이블명, 컬럼명)로 사용할때는 ${key명} 이고, 
		3. myBatis 에서 제공하는 if 엘리먼트나 choose 엘리먼트 안에서 사용할때는
		그냥 <if test="key명"> <when test="key명"> 으로 사용한다. -->
	
	<!-- 전자결재 양식선택(업무기안서, 휴가신청서 등..)을 위한 것 -->
<!-- 	<select id="getApprsortList" resultType="String">
		SELECT appr_name
		FROM tbl_appr a
		LEFT OUTER JOIN tbl_appr_sort s
		ON a.fk_appr_sortno = s.pk_appr_sortno
		WHERE pk_appr_sortno = 9
	</select> -->

	<!-- 로그인 멤버 정보 가져오기 -->
	<select id="getLoginMember" parameterType="com.spring.bts.hwanmo.model.EmployeeVO">
		SELECT  pk_emp_no, emp_name, 
		        d.ko_depname, fk_department_id, r.ko_rankname, fk_rank_id, 
		        emp_pwd, ishired, d.manager
		FROM tbl_employees E
		LEFT JOIN tbl_dep_sort D
		ON E.fk_department_id = D.pk_dep_no
		LEFT JOIN tbl_rank_sort R
		ON E.fk_rank_id = R.pk_rank_no
		WHERE E.ishired = 1 AND pk_emp_no = #{pk_emp_no} AND emp_pwd = #{emp_pwd}
	</select>
	
	
	<!-- 파일첨부가 없는 전자결재 문서작성 --> 
	<insert id="edmsAdd" parameterType="com.spring.bts.yuri.model.ApprVO">
		INSERT INTO
		tbl_appr(pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno, fk_fin_empno, emergency,
		         title, contents,
		         status, mid_accept, fin_accept,
		         mid_opinion, fin_opinion,
		         writeday, viewcnt)
		VALUES(seq_apprno.nextval, #{fk_appr_sortno}, #{fk_emp_no}, #{fk_mid_empno}, #{fk_fin_empno}, #{emergency},
		       #{title}, #{contents},
		       default, default, default,
		       null, null,
		       default, default)
	</insert>


	<!-- 파일첨부가 있는 전자결재 문서작성 --> 
	<insert id="edmsAdd_withFile" parameterType="com.spring.bts.yuri.model.ApprVO">
		INSERT INTO
		tbl_appr(pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno, fk_fin_empno, emergency,
				 title, contents,
				 filename, orgfilename, fileSize,
				 status, mid_accept, fin_accept,
				 mid_opinion, fin_opinion,
				 writeday, viewcnt)
		VALUES(seq_apprno.nextval, #{fk_appr_sortno}, #{fk_emp_no}, #{fk_mid_empno}, #{fk_fin_empno}, #{emergency},
			   #{title}, #{contents},
			   #{filename}, #{orgfilename}, #{fileSize},
			   default, default, default,
			   null, null,
			   default, default)
	</insert>


	<!-- 페이징 처리를 안한 검색어가 없는 전체 대기문서 목록 보여주기 -->
<!-- 	<select id="waitListNoSearch" resultType="com.spring.bts.yuri.model.ApprVO">
		select A.fk_emp_no, A.writeday, S.appr_name, A.emergency, A.title, NVL(A.filename,'파일없음'), A.pk_appr_no, a.status
		from tbl_appr A left join tbl_appr_sort S
		on A.fk_appr_sortno = S.pk_appr_sortno
		order by A.pk_appr_no desc
	</select> -->


	<!-- 이전글/다음글이 있는, 파일첨부가 있는 대기문서 1개 조회하기 -->
	<!--  이렇게 하면 검색할 때 안되지 않나? -->
	<select id="getView" parameterType="HashMap" resultType="com.spring.bts.yuri.model.ApprVO">
		SELECT  previousseq, previoussubject
	            , pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno, fk_fin_empno, emergency
	            , title, contents, filename, orgfilename, fileSize, status, mid_accept, fin_accept
	            , mid_opinion, fin_opinion, writeday, viewcnt
	            , nextseq, nextsubject
              , emp_name , ko_rankname , ko_depname
		from
		(
		    select  lag(pk_appr_no,1) over(order by pk_appr_no desc)  as previousseq
		          , lag(title,1) over(order by pk_appr_no desc) as previoussubject
		          , pk_appr_no, fk_appr_sortno, A.fk_emp_no AS fk_emp_no, NVL(fk_mid_empno, -1) AS fk_mid_empno, fk_fin_empno, emergency
		          , title, contents, filename, orgfilename, fileSize, status, NVL(mid_accept, -1) AS mid_accept, fin_accept
		          , NVL(mid_opinion, '') AS mid_opinion, fin_opinion, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') as writeday, viewcnt
		          , lead(pk_appr_no,1) over(order by pk_appr_no desc) as nextseq
		          , lead(title,1) over(order by pk_appr_no desc) as nextsubject
		          , E.EMP_NAME AS emp_name
		          , R.ko_rankname AS ko_rankname
		          , D.ko_depname AS ko_depname
		    from tbl_appr A
		    join tbl_employees E 
		    on A.FK_EMP_NO = E.pk_emp_no
		    join tbl_rank_sort R
		    on E.FK_RANK_ID = R.PK_RANK_NO
		    join tbl_dep_sort D
		    on E.FK_DEPARTMENT_ID = D.PK_DEP_NO
		) V
		where pk_appr_no = #{pk_appr_no}
	</select>
	<!-- where status = 0 -->
	
	
	
	
	<!-- 글조회수 1개 증가시키기 메소드 -->
	<update id="setAddReadCount" parameterType="String">
		update tbl_appr set viewcnt = 1
		where pk_appr_no = #{pk_appr_no}
	</update>
	
	
	<!-- 1개글 수정하기 -->
	<update id="edit" parameterType="com.spring.bts.yuri.model.ApprVO">
		update tbl_appr set title = #{title}, contents = #{contents}
		where pk_appr_vo = #{pk_appr_vo}
	</update>
	
	<!-- 1개글 삭제하기 -->
	<delete id="del" parameterType="HashMap">
		delete from tbl_appr
		where pk_appr_no = #{pk_appr_no}
	</delete>
	
	<!-- 검색어 입력 시 자동글 완성하기 -->
	<!-- select distinct title, pk_appr_no
	FROM tbl_appr
	where status in (0, 1, 2)
	and lower(title)
	like '%'|| lower('휴가') ||'%'
	order by title asc, pk_appr_no desc;
	
	select distinct E.emp_name, A.pk_appr_no
	FROM tbl_appr A LEFT JOIN tbl_employees E
	ON A.fk_emp_no = E.pk_emp_no
	where status in (0, 1, 2)
	and lower(E.emp_name)
	like '%'|| lower('인부장') ||'%'
	order by emp_name asc, pk_appr_no desc;	 -->
	
	<!-- 검색어 입력 시 자동글 완성하기 -->
	<select id="wordSearchShow" parameterType="HashMap" resultType="String">	
		<choose>
			<when test="searchType eq 'emp_name'">
				SELECT DISTINCT ${searchType}
			</when>
			<otherwise>
				SELECT ${searchType}
			</otherwise>
		</choose>
		FROM tbl_appr A LEFT JOIN tbl_employees E
		ON A.fk_emp_no = E.pk_emp_no
		WHERE 1=1
		AND lower(${searchType}) LIKE '%'|| lower(#{searchWord}) ||'%'
		<!--
			select 문에서 distinct 와 order by 절을 함께 사용할때는 조심해야 한다.
			order by 절에는 select 문에서 사용된 컬럼만 들어올 수가 있다.
			또는 order by 절을 사용하지 않아야 한다.
		-->
		<choose>
			<when test="searchType neq 'subject'">
			<!-- JSTL은 ne 지만 여기서는 neq 이다! -->
				ORDER BY ${searchType} ASC
			</when>
			<otherwise>
				ORDER BY pk_appr_no DESC
			</otherwise>
		</choose>
	</select>
	<!--
		select 문에서 distinct 와 order by 절을 함께 사용할때는 조심해야 한다.
		order by 절에는 select 문에서 사용된 컬럼만 들어올 수가 있다.
		또는 order by 절을 사용하지 않아야 한다.
	-->


	<!-- 총 게시물 건수 구하기 / 검색이 있을 때와 없을 때로 나눠야 된다. -->
	<!-- 아래 세줄 때문에 오류 java.sql.SQLException: 부적합한 열 유형: 1111 <= 컨트롤러에서 searchWord를 안 줘서? -->
	<select id="getTotalCount" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_appr
		where 1=1
		<if test='searchType != ""'>
		and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
		</if>
	</select>
	<!--
		오류 났던 이유 :
		1. dao에서 paraMap을 안 넘겨줌
		2. 오타났을까봐 강사님 코드 복붙하는 과정에서 tbl_appr 대신 tbl_board 가 들어감	
	-->

	<!-- // ==== 파일첨부가 있는 게시판의 페이징 처리한 글목록 가져오기(검색이 있든지, 검색이 없든지 모두 다 포함한 것) ==== // -->		
	<select id="edmsListSearchWithPaging" parameterType="HashMap" resultType="com.spring.bts.yuri.model.ApprVO">
		select	pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno,
		        fk_fin_empno, emergency, title, contents, filename,
		        orgfilename, fileSize, status, mid_accept, fin_accept,
		        mid_opinion, fin_opinion,
		        writeday, viewcnt,
		        emp_name
		from 
		(
		    select  rownum as rno, 
		            pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno,
		            fk_fin_empno, emergency, title, contents, filename,
		            orgfilename, fileSize, status, mid_accept, fin_accept,
		            mid_opinion, fin_opinion,
		            writeday, viewcnt,
		            emp_name
		    from(   
		        select  pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno,
		                fk_fin_empno, emergency, title, contents, filename,
		                orgfilename, fileSize, status, mid_accept, fin_accept,
		                NVL(mid_opinion, '') AS mid_opinion, fin_opinion,
		                to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday, viewcnt,
		                E.emp_name AS emp_name
		        from tbl_appr A left join tbl_employees E
		        ON A.fk_emp_no = E.pk_emp_no
		        where 1 = 1
		        <if test='searchType != "" and searchWord != ""'>
				and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
				</if>
		        order by pk_appr_no desc
		    ) V
		) T
		where T.rno between #{startRno} and #{endRno}
	</select>











	<!-- // ==== 파일첨부가 있는 게시판의 페이징 처리한 대기목록 가져오기(검색이 있든지, 검색이 없든지 모두 다 포함한 것) ==== // -->		
	<select id="edmsListSearchWithPaging_wait" parameterType="HashMap" resultType="com.spring.bts.yuri.model.ApprVO">
		select	pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno,
		        fk_fin_empno, emergency, title, contents, filename,
		        orgfilename, fileSize, status, mid_accept, fin_accept,
		        mid_opinion, fin_opinion,
		        writeday, viewcnt,
		        emp_name
		from 
		(
		    select  rownum as rno, 
		            pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno,
		            fk_fin_empno, emergency, title, contents, filename,
		            orgfilename, fileSize, status, mid_accept, fin_accept,
		            mid_opinion, fin_opinion,
		            writeday, viewcnt,
		            emp_name
		    from(   
		        select  pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno,
		                fk_fin_empno, emergency, title, contents, filename,
		                orgfilename, fileSize, status, mid_accept, fin_accept,
		                NVL(mid_opinion, '') AS mid_opinion, fin_opinion,
		                to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday, viewcnt,
		                E.emp_name AS emp_name
		        from tbl_appr A left join tbl_employees E
		        ON A.fk_emp_no = E.pk_emp_no
		        where 1 = 1
		        and status = 0
		        <if test='searchType != "" and searchWord != ""'>
				and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
				</if>
		        order by pk_appr_no desc
		    ) V
		) T
		where T.rno between #{startRno} and #{endRno}
	</select>



	<!-- // ==== 파일첨부가 있는 게시판의 페이징 처리한 승인목록 가져오기(검색이 있든지, 검색이 없든지 모두 다 포함한 것) ==== // -->		
	<select id="edmsListSearchWithPaging_accept" parameterType="HashMap" resultType="com.spring.bts.yuri.model.ApprVO">
		select	pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno,
		        fk_fin_empno, emergency, title, contents, filename,
		        orgfilename, fileSize, status, mid_accept, fin_accept,
		        mid_opinion, fin_opinion,
		        writeday, viewcnt,
		        emp_name
		from 
		(
		    select  rownum as rno, 
		            pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno,
		            fk_fin_empno, emergency, title, contents, filename,
		            orgfilename, fileSize, status, mid_accept, fin_accept,
		            mid_opinion, fin_opinion,
		            writeday, viewcnt,
		            emp_name
		    from(   
		        select  pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno,
		                fk_fin_empno, emergency, title, contents, filename,
		                orgfilename, fileSize, status, mid_accept, fin_accept,
		                NVL(mid_opinion, '') AS mid_opinion, fin_opinion,
		                to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday, viewcnt,
		                E.emp_name AS emp_name
		        from tbl_appr A left join tbl_employees E
		        ON A.fk_emp_no = E.pk_emp_no
		        where 1 = 1
		        and status = 2
		        <if test='searchType != "" and searchWord != ""'>
				and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
				</if>
		        order by pk_appr_no desc
		    ) V
		) T
		where T.rno between #{startRno} and #{endRno}
	</select>


	<!-- 반려문서함 -->
	<!-- // ==== 파일첨부가 있는 게시판의 페이징 처리한 반려목록 가져오기(검색이 있든지, 검색이 없든지 모두 다 포함한 것) ==== // -->		
	<select id="edmsListSearchWithPaging_reject" parameterType="HashMap" resultType="com.spring.bts.yuri.model.ApprVO">
		select	pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno,
		        fk_fin_empno, emergency, title, contents, filename,
		        orgfilename, fileSize, status, mid_accept, fin_accept,
		        mid_opinion, fin_opinion,
		        writeday, viewcnt,
		        emp_name
		from 
		(
		    select  rownum as rno, 
		            pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno,
		            fk_fin_empno, emergency, title, contents, filename,
		            orgfilename, fileSize, status, mid_accept, fin_accept,
		            mid_opinion, fin_opinion,
		            writeday, viewcnt,
		            emp_name
		    from(   
		        select  pk_appr_no, fk_appr_sortno, fk_emp_no, fk_mid_empno,
		                fk_fin_empno, emergency, title, contents, filename,
		                orgfilename, fileSize, status, mid_accept, fin_accept,
		                NVL(mid_opinion, '') AS mid_opinion, fin_opinion,
		                to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') AS writeday, viewcnt,
		                E.emp_name AS emp_name
		        from tbl_appr A left join tbl_employees E
		        ON A.fk_emp_no = E.pk_emp_no
		        where 1 = 1
		        and status = 3
		        <if test='searchType != "" and searchWord != ""'>
				and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
				</if>
		        order by pk_appr_no desc
		    ) V
		) T
		where T.rno between #{startRno} and #{endRno}
	</select>

	<!-- 상세부서정보 페이지 사원목록 불러오기 -->
	<select id="addBook_depInfo_select" resultType="com.spring.bts.hwanmo.model.EmployeeVO">
		select E.pk_emp_no, E.emp_name , R.ko_rankname , D.ko_depname , R.pk_rank_no
		from tbl_employees E
		join tbl_rank_sort R
		on E.fk_rank_id = R.pk_rank_no
		join tbl_dep_sort D
		on E.fk_department_id = D.pk_dep_no
		order by R.pk_rank_no
	</select>
   
   
	<!-- status		0 대기중, 1 진행중, 2 승인됨, 3 반려됨 -->
	<!-- mid_accept	0 아무것도 안 함, 1 승인함, 2 반려함  -->
	<!-- fin_accept	0 아무것도 안 함, 1 승인함, 2 반려함  -->
	<!-- 문서 승인하기 -->
	<update id="accept" parameterType="com.spring.bts.yuri.model.ApprVO">
		update tbl_appr
		<choose>
			<!-- 중간결재자의 승인 -->
			<when test="mid_accept == 0 and status == 0">
			set status = 1, mid_accept = 1
			where pk_appr_no = #{pk_appr_no}
				  and fk_mid_empno = #{fk_emp_no}
			</when>
			<!-- 최종결재자의 승인 -->
			<when test="mid_accept == 1 and fin_accept == 0 and status == 1">
			set status = 2, fin_accept = 1
			where pk_appr_no = #{pk_appr_no}
		      and fk_fin_empno = #{fk_emp_no}
			</when>
		</choose>
	</update>


	<!-- status		0 대기중, 1 진행중, 2 승인됨, 3 반려됨 -->
	<!-- mid_accept 0 아무것도 안 함, 1 승인함, 2 반려함  -->
	<!-- fin_accept 0 아무것도 안 함, 1 승인함, 2 반려함  -->
	<!-- 문서 반려하기 -->
	<update id="reject" parameterType="com.spring.bts.yuri.model.ApprVO">
		update tbl_appr
		<choose>
			<!-- 중간결재자의 반려 -->
			<when test="mid_accept == 0 and status == 0">
			set status = 3, mid_accept = 2
			where pk_appr_no = #{pk_appr_no}
				  and fk_mid_empno = #{fk_emp_no}
			</when>
			<!-- 최종결재자의 반려 / 즉 중간결재자는 승인했지만 최종결재자는 반려하는 것! -->
			<when test="mid_accept == 1 and fin_accept == 0 and status == 1">
			set status = 3, fin_accept = 2
			where pk_appr_no = #{pk_appr_no}
				  and fk_fin_empno = #{fk_emp_no}
			</when>
		</choose>
	</update>
	
	<!-- // 상태 상관없이 전체 리스트 불러오기 -->
	<resultMap type="Map" id="getAllList_map">
		<result property="appr_name" 				column="appr_name" 				javaType="String" />
		<result property="emergency" 				column="emergency" 				javaType="String" />
		<result property="title" 					column="title" 					javaType="String" />
		<result property="filename" 				column="filename" 				javaType="String" />
		<result property="pk_appr_no" 				column="pk_appr_no" 			javaType="String" />
		<result property="writeday" 				column="writeday" 				javaType="String" />
		<result property="mid_accept" 				column="mid_accept" 			javaType="String" />
		<result property="fin_accept" 				column="fin_accept" 			javaType="String" />
	</resultMap>
	<select id="getAllList" resultMap="getAllList_map">
		select S.appr_name AS appr_name, A.emergency AS emergency, A.title AS title , A.filename as filename
		    , A.pk_appr_no AS pk_appr_no, to_char(A.writeday, 'yyyy-mm-dd') AS writeday
		    , A.mid_accept AS mid_accept, A.fin_accept AS fin_accept
		from tbl_appr A JOIN tbl_appr_sort S
		ON A.fk_appr_sortno = S.pk_appr_sortno
		order by pk_appr_no desc
	</select>
	
	<!-- // 상태가 승인됨인 리스트 불러오기 -->
	<resultMap type="Map" id="getAcceptList_map">
		<result property="appr_name" 				column="appr_name" 				javaType="String" />
		<result property="emergency" 				column="emergency" 				javaType="String" />
		<result property="title" 					column="title" 					javaType="String" />
		<result property="filename" 				column="filename" 				javaType="String" />
		<result property="pk_appr_no" 				column="pk_appr_no" 			javaType="String" />
		<result property="writeday" 				column="writeday" 				javaType="String" />
		<result property="mid_accept" 				column="mid_accept" 			javaType="String" />
		<result property="fin_accept" 				column="fin_accept" 			javaType="String" />
	</resultMap>
	<select id="getAcceptList" resultMap="getAcceptList_map">
		select S.appr_name AS appr_name, A.emergency AS emergency, A.title AS title , A.filename as filename
		    , A.pk_appr_no AS pk_appr_no, to_char(A.writeday, 'yyyy-mm-dd') AS writeday
		    , A.mid_accept AS mid_accept, A.fin_accept AS fin_accept
		from tbl_appr A JOIN tbl_appr_sort S
		ON A.fk_appr_sortno = S.pk_appr_sortno
		where A.fin_accept = 1
		order by pk_appr_no desc
	</select>
	
	<!-- // 상태가 반려됨인 리스트 불러오기 -->
	<resultMap type="Map" id="getRejectList_map">
		<result property="appr_name" 				column="appr_name" 				javaType="String" />
		<result property="emergency" 				column="emergency" 				javaType="String" />
		<result property="title" 					column="title" 					javaType="String" />
		<result property="filename" 				column="filename" 				javaType="String" />
		<result property="pk_appr_no" 				column="pk_appr_no" 			javaType="String" />
		<result property="writeday" 				column="writeday" 				javaType="String" />
		<result property="mid_accept" 				column="mid_accept" 			javaType="String" />
		<result property="fin_accept" 				column="fin_accept" 			javaType="String" />
	</resultMap>
	<select id="getRejectList" resultMap="getRejectList_map">
		select S.appr_name AS appr_name, A.emergency AS emergency, A.title AS title , A.filename as filename
		    , A.pk_appr_no AS pk_appr_no, to_char(A.writeday, 'yyyy-mm-dd') AS writeday
		    , A.mid_accept AS mid_accept, A.fin_accept AS fin_accept
		from tbl_appr A JOIN tbl_appr_sort S
		ON A.fk_appr_sortno = S.pk_appr_sortno
		where mid_accept = 2 or fin_accept = 2
		order by pk_appr_no desc
	</select>
	
	<!-- === // 로그인유저의 결재대기문서 총 갯수 가져오기 === -->
    <select id="getTotalCountWaitingSign" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_appr
		where ( ( fk_mid_empno = #{pk_emp_no} and mid_accept = 0 and fin_accept = 0) or ( mid_accept = 1 and fk_fin_empno = #{pk_emp_no} and fin_accept = 0 ) )
		<if test='searchType != ""'>
		and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
		</if>
    </select> 
	
	
	<!-- // 페이징 처리한 로그인유저의 결재대기목록 가져오기 -->
	<resultMap type="Map" id="waitingSignListWithPaging_map">
		<result property="appr_name" 				column="appr_name" 				javaType="String" />
		<result property="emergency" 				column="emergency" 				javaType="String" />
		<result property="title" 					column="title" 					javaType="String" />
		<result property="filename" 				column="filename" 				javaType="String" />
		<result property="pk_appr_no" 				column="pk_appr_no" 			javaType="String" />
		<result property="writeday" 				column="writeday" 				javaType="String" />
		<result property="mid_accept" 				column="mid_accept" 			javaType="String" />
		<result property="fin_accept" 				column="fin_accept" 			javaType="String" />
	</resultMap>
	<select id="waitingSignListWithPaging" resultMap="waitingSignListWithPaging_map">
	select appr_name, emergency, title , filename
		 , pk_appr_no, writeday, mid_accept, fin_accept
	from
	(		
			select rownum AS rno, appr_name, emergency, title , filename
				 , pk_appr_no, writeday, mid_accept, fin_accept
			from
			(
				select S.appr_name AS appr_name, A.emergency AS emergency, A.title AS title , A.filename as filename
				    , A.pk_appr_no AS pk_appr_no, to_char(A.writeday, 'yyyy-mm-dd') AS writeday
				    , A.mid_accept AS mid_accept, A.fin_accept AS fin_accept
				from tbl_appr A JOIN tbl_appr_sort S
				ON A.fk_appr_sortno = S.pk_appr_sortno
				where ( ( fk_mid_empno = #{pk_emp_no} and mid_accept = 0 and fin_accept = 0) or ( mid_accept = 1 and fk_fin_empno = #{pk_emp_no} and fin_accept = 0 ) )
				<if test='searchType !="" and searchWord != "" '>
		        and lower(${searchType}) like '%'||lower(#{searchWord}) ||'%'
		        </if>
		    ) V
	)T
	where rno between #{startRno} and #{endRno}
	</select>
	
	<!-- // 문서번호 통해 문서정보 가져오기 -->
	<select id="getApprInfo" resultType="com.spring.bts.yuri.model.ApprVO" parameterType="String">
		select pk_appr_no, mid_accept, mid_opinion, fk_mid_empno, fin_accept, fin_opinion, fk_fin_empno
		from tbl_appr
		where pk_appr_no = #{pk_appr_no}
	</select>

	<!-- // 승인, 반려 처리하기 -->
	<update id="updateAppr" parameterType="com.spring.bts.yuri.model.ApprVO">
		update tbl_appr set mid_accept = #{mid_accept}, mid_opinion = #{mid_opinion}
			 , fin_accept = #{fin_accept}, fin_opinion = #{fin_opinion}
		where pk_appr_no = #{pk_appr_no}
	</update>

	<!-- 문서번호로 결재자 이름 받아오기 -->
	<resultMap type="Map" id="getApprSignInfo_map">
		<result property="fk_mid_empname" 				column="fk_mid_empname" 				javaType="String" />
		<result property="fk_fin_empname" 				column="fk_fin_empname" 				javaType="String" />
	</resultMap>

	<select id="getApprSignInfo" parameterType="String" resultMap="getApprSignInfo_map">
		select (select emp_name from tbl_employees where pk_emp_no = fk_mid_empno) AS fk_mid_empname
			 , (select emp_name from tbl_employees where pk_emp_no = fk_fin_empno) AS fk_fin_empname
		from tbl_appr
		where pk_appr_no = #{pk_appr_no}
	</select>

</mapper>