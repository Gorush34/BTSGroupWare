<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<!-- ==== 대부분은 namespace에 파일이름 사용(유일하니까) ==== -->
<mapper namespace="jieun">


	
	<!-- 사내 캘린더에 사내 캘린더 소분류 추가하기  -->
	<insert id="addComCalendar" parameterType="HashMap">
		insert into tbl_calendar(pk_calno, fk_lgcatgono, calname, fk_emp_no)
		values (seq_calno.nextval, 2, #{addCom_calname}, #{fk_emp_no})
	</insert>

			<!-- // 사내 캘린더에 캘린더 소분류 명 존재 여부 알아오기  -->
			<select id="existComCalendar" parameterType="HashMap" resultType="int">
				select  count(*)
				from tbl_calendar
				where fk_lgcatgono = 2 and and fk_emp_no = #{fk_emp_no} and calname = #{addCom_calname}
			</select>
	
	<!-- 사내 캘린더에 사내 캘린더 소분류 보여주기 -->
	<select id="showCompanyCalendar" resultType="com.spring.bts.jieun.model.CalendarVO">
		select pk_calno, fk_lgcatgono, calname
		from tbl_calendar
		where fk_lgcatgono = 2
		order by pk_calno asc
	</select>
	
	<!-- 내 캘린더에 내 캘린더 소분류 추가하기  -->
	<insert id="addMyCalendar" parameterType="HashMap">
		insert into tbl_calendar(pk_calno, fk_lgcatgono, calname, fk_emp_no)
		values (seq_calno.nextval, 1, #{addMy_calname}, #{fk_emp_no})
	</insert>
			<!-- 내 캘린더에 캘린더 소분류 명 존재 여부 알아오기 -->
			<select id="existMyCalendar" parameterType="HashMap" resultType="int">
				select count(*)
				from tbl_calendar
				where fk_lgcatgono = 1 and fk_emp_no = #{fk_emp_no} and calname = #{addMy_calname}
			</select>
	
	<!-- 내 캘린더에 내 캘린더 소분류 보여주기 -->
	<select id="showMyCalendar" parameterType="String" resultType="com.spring.bts.jieun.model.CalendarVO">
		select pk_calno, fk_lgcatgono, calname
		from tbl_calendar
		where fk_lgcatgono = 1 and fk_emp_no = #{fk_emp_no}
		order by pk_calno asc
	</select>
	
	<!-- 캘린더 소분류 수정하기 -->
	<update id="editCalendar" parameterType="HashMap">
		update tbl_calendar set calname = #{calname}
		where pk_calno = #{pk_calno}
	</update>
	
	<!-- 캘린더에 이름이 있는지 확인 -->
	<select id="existsCalendar" parameterType="String" resultType="int">
		select count(*)
		from tbl_calendar
		where fk_lgcatgono = #{caltype} 
		and fk_emp_no = #{fk_emp_no} 
		and calname = #{calname}
	</select>
	
	<!-- 캘린더 소분류 삭제하기  -->
	<delete id="deleteCalendar" parameterType="String">
		delete from tbl_calendar
		where pk_calno = #{pk_calno}
	</delete>
	
	
	<!-- 등록 폼에 서브캘린더 가져오기 -->
	<select id="selectCalNo" parameterType="HashMap" resultType="com.spring.bts.jieun.model.CalendarVO">
		select pk_calno, fk_lgcatgono, calname
		from tbl_calendar
		where fk_lgcatgono = #{fk_lgcatgono} and fk_emp_no =#{fk_emp_no}
		order by pk_calno asc
	</select>
	
	<!-- 참석자 추가하기 : 사원 명단 불러오기 -->
	<select id="searchJoinUser" parameterType="String" resultType="com.spring.bts.hwanmo.model.EmployeeVO">
		select uq_email, emp_name
		from tbl_employees
		where lower(emp_name) like '%'|| lower(#{joinUserName}) ||'%'
	</select>
	
	<!-- 일정등록 하기  -->
	<insert id="scheduleRegisterInsert" parameterType="HashMap">
		insert into tbl_schedule(pk_schno, fk_emp_no, fk_calno, subject, startdate, enddate, content, color, place, joinuser, fk_lgcatgono)
		values(seq_schno.nextval, #{fk_emp_no}, #{fk_calno}, #{subject}, to_date(#{startdate}, 'yyyymmddhh24miss'), to_date(#{enddate}, 'yyyymmddhh24miss'), #{content}, #{color}, #{place}, #{joinuser}, #{fk_lgcatgono} )
	</insert>


	<!-- 일정 보여주기 -->
	<select id="selectSchedule" parameterType="HashMap" resultType="com.spring.bts.jieun.model.ScheduleVO">
		select pk_schno, fk_emp_no, fk_calno, subject, startdate, enddate, content, color, place, joinuser, fk_lgcatgono
		from tbl_schedule
		where fk_emp_no = #{fk_emp_no} 
		OR fk_lgcatgono = 2 
		OR (fk_lgcatgono != 2 AND lower(joinuser) like '%'|| lower(#{emp_name}) ||'%' )
		order by pk_schno asc
	</select>

	<!-- 일정 상세 페이지  -->
	<resultMap type="HashMap" id="detailSchedule_Map">
		<result property="PK_SCHNO" 	column="pk_schno" 	    javaType="String"/>
		<result property="STARTDATE" 	column="startdate" 		javaType="String" />
		<result property="ENDDATE" 		column="enddate" 		javaType="String" />
		<result property="SUBJECT" 		column="subject" 		javaType="String" />
		<result property="COLOR" 		column="color" 			javaType="String" />
		<result property="PLACE" 		column="place" 			javaType="String" />
		<result property="JOINUSER" 	column="joinuser" 		javaType="String" />
		<result property="CONTENT" 		column="content" 		javaType="String" />
		<result property="FK_CALNO"     column="fk_calno" 	    javaType="String" />
		<result property="FK_LGCATGONO" column="fk_lgcatgono" 	javaType="String" />
		<result property="FK_EMP_NO" 	column="fk_emp_no" 		javaType="String" />
		<result property="EMP_NAME" 	column="emp_name" 		javaType="String" />
		<result property="CALNAME" 	    column="calname" 	    javaType="String" />
	</resultMap>
	
	<select id="detailSchedule" parameterType="String" resultMap="detailSchedule_Map">
		select SD.pk_schno
		     , to_char(SD.startdate,'yyyy-mm-dd hh24:mi') as startdate
		     , to_char(SD.enddate,'yyyy-mm-dd hh24:mi') as enddate  
		     , SD.subject
		     , SD.color
		     , nvl(SD.place,'-') as place
		     , nvl(SD.joinuser,'공유자가 없습니다.') as joinuser
		     , nvl(SD.content,'') as content
		     , SD.fk_calno
		     , SD.fk_lgcatgono
		     , SD.fk_emp_no
		     , E.emp_name
		     , C.calname
		from tbl_schedule SD 
		JOIN tbl_employees E
		ON SD.fk_emp_no = E.pk_emp_no
		JOIN tbl_calendar C
		ON SD.fk_calno = C.pk_calno
		where SD.pk_schno = #{pk_schno}
	</select>
		
		
	<!-- 일정 삭제 하기  -->
	<delete id="deleteSchedule" parameterType="String">
		delete from tbl_schedule
		where pk_schno = #{pk_schno}
	</delete>

	<!-- 일정 수정하기 -->
	<update id="editSchedule_end" parameterType="com.spring.bts.jieun.model.ScheduleVO">
		update tbl_schedule set startdate = to_date(#{startdate}, 'yyyymmddhh24miss')
                              , enddate = to_date(#{enddate}, 'yyyymmddhh24miss')
                              , subject = #{subject}
                              , fk_lgcatgono = #{fk_lgcatgono}
                              , fk_calno = #{fk_calno}
                              , color = #{color}
                              , place = #{place}
                              , joinuser = #{joinuser}
                              , content = #{content}
		where pk_schno = #{pk_schno}
	</update>

	<!-- 총 일정 검색 건수(totalCount) -->
	<select id="getTotalCount" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_schedule
		where 1=1
		<if test="searchType !='' and searchWord !='' "> <!-- 일반 검색 -->
			and lower(subject) like '%'|| lower(#{searchWord}) || '%' 
			OR (lower(joinuser) like '%'|| lower(#{searchWord}) || '%' and fk_emp_no = #{fk_emp_no})
			OR lower(content) like '%'|| lower(#{searchWord}) || '%' 
			OR lower(place) like '%'|| lower(#{searchWord}) || '%'
		</if>
		<if test="searchSubject !=''"> <!-- 상세일정에서 일정명만 검색했을 때 -->
			and lower(subject) like '%'|| lower(#{searchSubject}) || '%' 
			<choose> 
				<when test="searchJoinuser !=''"> <!-- 상세일정에서 일정명+ 공유자명 검색했을 때 -->
					and fk_emp_no = #{fk_emp_no}
					and lower(joinuser) like '%'|| lower(#{searchJoinuser}) || '%'
				</when> 
				<when test="searchJoinuser !=''"> <!-- 상세일정에서 일정명+ 일자 검색했을 때 -->
					and ( to_char(startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
					and ( to_char(enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
				</when> 
			</choose>
		</if>
		<if test="searchJoinuser !=''"> <!-- 상세일정에서 공유자만 검색했을 때 -->
			and fk_emp_no = #{fk_emp_no}
			and lower(joinuser) like '%'|| lower(#{searchJoinuser}) || '%' 
			<choose> 
				<when test="searchJoinuser !=''"> <!-- 상세일정에서 공유자+ 일자 검색했을 때 -->
					and ( to_char(startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
					and ( to_char(enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
				</when> 
			</choose>
		</if>
		<if test="startdate !='' and enddate !=''"> <!-- 상세일정에서 일자만 검색했을 때 -->
			and ( to_char(startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
			and ( to_char(enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} ) 
		</if>
		
	</select>

	<!-- 페이징 처리한 캘린더 가져오기(검색어가 없다라도 날짜범위 검색은 항시 포함된 것임) -->
	<resultMap type="HashMap" id="scheduleListSearchWithPaging_Map">
		<result property="PK_SCHNO" 	column="pk_schno"   	javaType="String" />
		<result property="STARTDATE" 	column="startdate" 		javaType="String" />
		<result property="ENDDATE" 		column="enddate" 		javaType="String" />
		<result property="EMP_NAME" 	column="emp_name" 	    javaType="String" />
		<result property="PLACE" 	    column="place" 	        javaType="String" />
		<result property="SUBJECT" 		column="subject" 		javaType="String" />
		<result property="CONTENT" 		column="content" 		javaType="String" />
		<result property="JOINUSER" 	column="joinuser" 		javaType="String" />
	</resultMap>
	<select id="scheduleListSearchWithPaging" parameterType="HashMap" resultMap="scheduleListSearchWithPaging_Map">
		select pk_schno 
		     , startdate, enddate, emp_name
		     , place, subject, content, joinuser
		from 
		(
			select  row_number() over(order by S.pk_schno desc) as rno 
			      , S.pk_schno
			      , to_char(S.startdate, 'yyyy-mm-dd hh24:mi') as startdate
			      , to_char(S.enddate, 'yyyy-mm-dd hh24:mi') as enddate
			      , E.emp_name 
			      , S.place, S.subject, S.content, S.joinuser 
			from tbl_schedule S
			JOIN tbl_employees E 
			ON S.fk_emp_no = E.pk_emp_no
			
			where 1=1
			
				<if test="searchType !='' and searchWord !='' "> <!-- 일반 검색 -->
				and lower(S.subject) like '%'|| lower(#{searchWord}) || '%' 
				OR (lower(S.joinuser) like '%'|| lower(#{searchWord}) || '%' and S.fk_emp_no = #{fk_emp_no})
				OR lower(S.content) like '%'|| lower(#{searchWord}) || '%' 
				OR lower(S.place) like '%'|| lower(#{searchWord}) || '%'
			</if>
			<if test="searchSubject !=''"> <!-- 상세일정에서 일정명만 검색했을 때 -->
				and lower(S.subject) like '%'|| lower(#{searchSubject}) || '%' 
				<choose> 
					<when test="searchJoinuser !=''"> <!-- 상세일정에서 일정명+ 공유자명 검색했을 때 -->
						and S.fk_emp_no = #{fk_emp_no}
						and lower(S.joinuser) like '%'|| lower(#{searchJoinuser}) || '%'
					</when> 
					<when test="searchJoinuser !=''"> <!-- 상세일정에서 일정명+ 일자 검색했을 때 -->
						and ( to_char(S.startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
						and ( to_char(S.enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
					</when> 
				</choose>
			</if>
			<if test="searchJoinuser !=''"> <!-- 상세일정에서 공유자만 검색했을 때 -->
				and S.fk_emp_no = #{fk_emp_no}
				and lower(S.joinuser) like '%'|| lower(#{searchJoinuser}) || '%' 
				<choose> 
					<when test="searchJoinuser !=''"> <!-- 상세일정에서 공유자+ 일자 검색했을 때 -->
						and ( to_char(S.startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
						and ( to_char(S.enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
					</when> 
				</choose>
			</if>
			<if test="startdate !='' and enddate !=''"> <!-- 상세일정에서 일자만 검색했을 때 -->
				and ( to_char(S.startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
				and ( to_char(S.enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} ) 
			</if>
		) V 
		where V.rno between #{startRno} and #{endRno}
	</select>
	

<!-- ======================================================================== -->


	<!-- 예약 페이지에 띄울 자원 리스트 가져오기 -->
	<resultMap type="HashMap" id="resourceReservation_Map">
		<result property="PK_RNO"     column="pk_rno"      javaType="String"/>
		<result property="PK_CLASSNO" column="pk_classno"  javaType="String"/>
		<result property="CLASSNAME"  column="classname"   javaType="String"/>
		<result property="RNAME"      column="rname"       javaType="String"/>
		<result property="RINFO"      column="rinfo"       javaType="String"/>	
	</resultMap>
	<select id="resourceReservation" resultMap="resourceReservation_Map">
		select R.pk_rno, RC.pk_classno, RC.classname, R.rname, R.rinfo
		from tbl_resource R
		join tbl_resourceclass RC
		on R.fk_classno = RC.pk_classno
		order by R.rname asc
	</select>
	
	<select id="classSelect" resultMap="resourceReservation_Map">
		select pk_classno, classname
		from  tbl_resourceclass 
		order by pk_classno asc
	</select>
	
	
	

	<!-- 해당 자원 예약내용 가져오기 -->
	<resultMap type="HashMap" id="resourceSpecialReservation_Map">
		<result property="PK_RSERNO"       column="pk_rserno"        javaType="String"/>
		<result property="FK_CLASSNO"      column="fk_classno"       javaType="String"/>
		<result property="FK_RNO"          column="fk_rno"           javaType="String"/>
		<result property="FK_EMP_NO"       column="fk_emp_no"        javaType="String"/>
		<result property="EMP_NAME"        column="emp_name"         javaType="String"/>
		<result property="RNAME"           column="rname"            javaType="String"/>
		<result property="RINFO"           column="rinfo"            javaType="String"/>
		<result property="RSERSTARTDATE"   column="rserstartdate"    javaType="String"/>
		<result property="RSERENDDATE"     column="rserenddate"      javaType="String"/>
		<result property="RSERUSECASE"     column="rserusecase"      javaType="String"/>
		<result property="COLOR"     column="color"      javaType="String"/>
	</resultMap>
	<select id="resourceSpecialReservation" parameterType="HashMap" resultMap="resourceSpecialReservation_Map">	
	select RV.pk_rserno, RV.fk_classno, RV.fk_rno, RV.fk_emp_no, 
		   E.emp_name, R.rname, R.rinfo,
		   RV.rserstartdate, RV.rserenddate, RV.rserusecase, RV.color
	from tbl_resource R
	join tbl_reservation RV
	ON R.pk_rno = RV.fk_rno 
	join tbl_employees E
	ON RV.fk_emp_no = E.pk_emp_no
	where RV.fk_rno = #{pk_rno}
	</select>
	
	<!--  등록 폼에 자원 select 가져오기 -->
	<select id="resourceSelect" parameterType="HashMap" resultMap="resourceReservation_Map">
		select R.pk_rno, RC.pk_classno, RC.classname, R.rname, R.rinfo
		from tbl_resource R
		join tbl_resourceclass RC
		on R.fk_classno = RC.pk_classno
		where RC.pk_classno = #{pk_classno}
	</select>

	<!--  예약 등록하기  -->
	<insert id="addReservation" parameterType="HashMap">
		insert into tbl_reservation(pk_rserno, fk_classno, fk_rno, fk_emp_no, rserstartdate, rserenddate, rserusecase, color)
		values (seq_rserno.nextval, #{fk_classno}, #{fk_rno}, #{fk_emp_no}, to_date(#{rserstartdate}, 'yyyymmddhh24miss'), to_date(#{rserenddate}, 'yyyymmddhh24miss'), #{rserusecase}, #{color})
	</insert>
	
	<select id="existReservation" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_reservation
		where fk_rno = #{fk_rno} and
		      (
		      to_date(#{rserstartdate}, 'yy/mm/dd hh24:mi:ss') BETWEEN rserstartdate AND rserenddate
		   OR to_date(#{rserenddate}, 'yy/mm/dd hh24:mi:ss') BETWEEN rserstartdate AND rserenddate 
           OR rserstartdate BETWEEN to_date(#{rserstartdate}, 'yy/mm/dd hh24:mi:ss')  AND to_date(#{rserenddate}, 'yy/mm/dd hh24:mi:ss')
           OR rserenddate BETWEEN to_date(#{rserstartdate}, 'yy/mm/dd hh24:mi:ss')  AND to_date(#{rserenddate}, 'yy/mm/dd hh24:mi:ss')
		      )
	</select>

	<!--  예약 상세보기 -->
	<select id="reservationDetail" parameterType="String" resultMap="resourceSpecialReservation_Map">
		select RV.pk_rserno, RV.fk_classno, RV.fk_rno, RV.fk_emp_no, 
		   E.emp_name, R.rname, R.rinfo,
		   RV.rserstartdate, RV.rserenddate, RV.rserusecase
		from tbl_resource R
		join tbl_reservation RV
		ON R.pk_rno = RV.fk_rno 
		join tbl_employees E
		ON RV.fk_emp_no = E.pk_emp_no
		where RV.pk_rserno = #{pk_rserno}
	</select>
	
	<!-- 예약 취소하기 -->
	<delete id="cancelReservation" parameterType="String">
		delete from tbl_reservation
		where pk_rserno = #{pk_rserno}
	</delete>
	
	
	
	<!-- 자원 등록하기 : 관리자 -->
	<insert id="resourceRegister_end" parameterType="HashMap">
		insert into tbl_resource(PK_RNO, fk_classno, rname, rinfo)
		values (seq_rno.nextval, #{fk_classno}, #{rname}, #{rinfo})
	</insert>
	
	
	<!-- 자원 수정 페이지 -->
	<select id="resourceEdit" parameterType="String" resultMap="resourceReservation_Map">
	 	select pk_rno, fk_classno, rname, rinfo
	 	from tbl_resource
	 	where pk_rno = #{pk_rno}
	</select>
	
	<!-- 자원 수정 -->
	<update id="resourceEditEnd" parameterType="HashMap">
		update tbl_resource set fk_classno = #{pk_classno}
							  , rname = #{rname}
							  , rinfo = #{rinfo}
		where pk_rno = #{pk_rno}
	</update>
	
	<!-- 자원 삭제 -->
	<delete id="deleteResource">
		delete from tbl_resource
		where pk_rno = #{pk_rno}
	</delete>
	
	
	<!-- ============================================================================================== -->
	
	<!-- 오늘의 일정 수 -->
	<select id="scheduleCount" parameterType="int" resultType="int">
		select count(*)
		from tbl_schedule
		where fk_emp_no = #{pk_emp_no} and (startdate = to_date(sysdate, 'yy/mm/dd') or enddate = to_date(sysdate, 'yy/mm/dd'))
	</select>
	<!-- 나의 예약현황 -->
	<select id="reservationCount" parameterType="int" resultType="int">
		select count(*)
		from tbl_reservation
		where fk_emp_no = #{pk_emp_no} and to_date(sysdate, 'yy/mm/dd') <![CDATA[ < ]]> rserenddate
	</select>
</mapper>