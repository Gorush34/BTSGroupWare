<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<!-- ==== 대부분은 namespace에 파일이름 사용(유일하니까) ==== -->
<mapper namespace="byungyoon">

	<!-- 주소록 메인페이지에 select 해오기 -->
	<select id="addBook_main_select" parameterType="HashMap" resultType="com.spring.bts.byungyoon.model.AddBookVO">
      select *
      from(
      select ROW_NUMBER() OVER(ORDER BY A.addb_name) AS rno, A.pk_addbook_no , A.addb_name , R.ko_rankname, A.phone AS phone, A.email AS email, A.companyname, A.com_tel
            from tbl_ADDBOOK A 
            join tbl_rank_sort R
            on R.PK_RANK_NO = A.fk_rank_no
            join tbl_employees E
            on E.pk_emp_no = A.registeruser
            where A.registeruser = #{pk_emp_no}
            <if test='searchWord != ""'>
			and addb_name like '%' || lower(#{searchWord})|| '%'
			</if>
            ) V
      where rno between #{startRno} and #{endRno}
   </select>
	
	
	<!-- 주소록 연락처에 insert 하기 -->
	<insert id="addBook_telAdd_insert" parameterType="com.spring.bts.byungyoon.model.AddBookVO" >
		insert into tbl_ADDBOOK(registeruser , PK_ADDBOOK_NO, FK_DEPT_NO, FK_RANK_NO, ADDB_NAME, COM_TEL, POSTCODE, ADDRESS, DETAILADDRESS, REFERENCEADDRESS, PHONE, EMAIL, PHOTOFILEPATH, PHOTOFILENAME, COMPANYNAME, MEMO, COMPANY_ADDRESS, KO_RANKNAME, KO_DEPNAME, FK_EMP_NO  )
		values(#{registeruser} ,  addbook_seq.nextval , #{fk_dept_no} ,#{fk_rank_no} , #{addb_name} ,#{com_tel} ,default ,default ,default ,default ,#{phone} ,#{email} ,default ,default ,#{companyname} ,#{memo} ,#{company_address} ,default ,default, default  ) 
	</insert>
	 
	
	<!-- 상세부서정보 페이지 사원목록 불러오기 -->
	<select id="addBook_depInfo_select" resultType="com.spring.bts.hwanmo.model.EmployeeVO">
		select E.pk_emp_no, E.emp_name , R.ko_rankname , D.ko_depname , E.fk_department_id AS fk_department_id, R.pk_rank_no, E.uq_email
		from tbl_EMPLOYEES E
		join tbl_rank_sort R
		on E.fk_rank_id = R.pk_rank_no
		join tbl_dep_sort D
		on E.fk_department_id = D.pk_dep_no
		order by R.pk_rank_no
	</select>
	
	
	<!-- 상세부서정보 페이지에서 사원상세정보 ajax로 select 해오기 -->
	<select id="addBook_depInfo_select_ajax" parameterType="int" resultType="com.spring.bts.hwanmo.model.EmployeeVO">
		select E.pk_emp_no , E.emp_name , (D.ko_depname) AS ko_depname , (R.ko_rankname) AS ko_rankname , E.uq_email , E.uq_phone , E.address , E.detailaddress , e.extraaddress
		from tbl_employees E
		join tbl_rank_sort R
		on E.fk_rank_id = r.pk_rank_no
		join tbl_dep_sort D
		on E.fk_department_id = d.pk_dep_no
		where pk_emp_no = #{pk_emp_no}
	</select>
	
	<!-- 주소록 메인에서 select 해와서 연락처 update 하기 (select) -->
	<select id="addBook_main_telUpdate_select" parameterType="int" resultType="com.spring.bts.byungyoon.model.AddBookVO">
		select A.pk_addbook_no , A.ADDB_NAME , (D.ko_depname) AS ko_depname , (R.ko_rankname) AS ko_rankname , A.EMAIL , A.PHONE , A.COMPANYNAME , A.COM_TEL , A.COMPANY_ADDRESS , A.MEMO
		from tbl_addbook A
		join tbl_rank_sort R
		on A.fk_rank_no = R.pk_rank_no
		join tbl_dep_sort D
		on A.fk_dept_no = D.pk_dep_no
        WHERE pk_addbook_no = #{pk_addbook_no}
	</select>
	
	<!-- 주소록 메인에서 select 해와서 연락처 update 하기 (update) -->
	<update id="addBook_main_telUpdate_update" parameterType="com.spring.bts.byungyoon.model.AddBookVO" >
		UPDATE tbl_addbook
     	SET ADDB_NAME = #{addb_name} , FK_DEPT_NO = #{fk_dept_no} , FK_RANK_NO = #{fk_rank_no} , EMAIL = #{email} , PHONE = #{phone} , COMPANYNAME = #{companyname} , COM_TEL = #{com_tel} , COMPANY_ADDRESS = #{company_address} , MEMO = #{memo}   
  		WHERE pk_addbook_no = #{pk_addbook_no}
	</update>

	<!-- 주소록 메인에서 총 연락처 개수 가져오기 -->
	<select id="addBook_main_totalPage" parameterType="HashMap" resultType="int">
		select count(*) 
		from tbl_addbook
		where registeruser = #{registeruser}
		<if test='searchWord != ""'>
		and addb_name like '%' || lower(#{searchWord})|| '%'
		</if>
	</select>
	
	<!-- 주소록 삭제하기 -->
	<delete id="addBook_delete" parameterType="int">
		delete from tbl_addBook
		where PK_ADDBOOK_NO = #{pk_addBook_no} 
	</delete>
	
	<!-- 상세부서정보 페이지에서 관리자로 로그인시 사원상세정보 update 하기 -->
	<update id="addBook_depInfo_update" parameterType="com.spring.bts.hwanmo.model.EmployeeVO" >
		UPDATE tbl_employees
     	SET emp_name = #{emp_name} , fk_department_id = #{fk_department_id} , fk_rank_id = #{fk_rank_id} , uq_email = #{uq_email} , uq_phone = #{uq_phone} , address = #{address} , detailaddress = #{detailaddress} 
  		WHERE pk_emp_no = #{pk_emp_no}
	</update>
	
	<!-- 이메일 중복체크 -->
	<select id="emailDuplicateCheck" parameterType="String" resultType="boolean">
  		select count(*)
		from tbl_employees
		where uq_email = #{email}
	</select>
	
	<!-- 사원목록에서 사원 삭제하기 -->
	<delete id="addBook_depInfo_delete" parameterType="int">
		delete from tbl_employees
		where pk_emp_no = #{pk_emp_no} 
	</delete>
	
	
	<!-- 사이드인포 계급순 구성원 띄우기 -->
	<select id="sideinfo_addBook" resultType="com.spring.bts.hwanmo.model.EmployeeVO">
		select E.emp_name AS emp_name , R.ko_rankname AS ko_rankname
		from tbl_employees E
		join tbl_rank_sort R
		on E.fk_rank_id = R.pk_rank_no
		order by R.pk_rank_no
	</select>
	
	<!-- 부서리스트 가져오기 -->
	<resultMap type="HashMap" id="depList">
		<result property="pk_dep_no"     column="pk_dep_no"      	javaType="String"/>
		<result property="ko_depname" 	 column="ko_depname"  		javaType="String"/>
		<result property="en_depname"  	 column="en_depname"   		javaType="String"/>
		<result property="manager"       column="manager"       	javaType="String"/>
	</resultMap>
	<select id="addBook_depList_select" resultMap="depList">
		select * 
		from tbl_dep_sort
	</select>
	
	<!-- 관리자에서 부서 추가하기 -->
	<insert id="addBook_dep_insert" parameterType="HashMap">
		insert into tbl_dep_sort (pk_dep_no , ko_depname , en_depname , manager)
		values (#{pk_dep_no} , #{ko_depname} , #{en_depname} , #{manager})
	</insert>
	
	

</mapper>